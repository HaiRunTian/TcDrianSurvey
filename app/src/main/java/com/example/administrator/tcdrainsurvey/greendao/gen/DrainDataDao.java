package com.example.administrator.tcdrainsurvey.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.tcdrainsurvey.bean.DrainData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRAIN_DATA".
*/
public class DrainDataDao extends AbstractDao<DrainData, Long> {

    public static final String TABLENAME = "DRAIN_DATA";

    /**
     * Properties of entity DrainData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WaterName = new Property(1, String.class, "waterName", false, "WATER_NAME");
        public final static Property RoadName = new Property(2, String.class, "roadName", false, "ROAD_NAME");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Weather = new Property(4, String.class, "weather", false, "WEATHER");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property SurverMan = new Property(6, String.class, "surverMan", false, "SURVER_MAN");
        public final static Property WaterNum = new Property(7, String.class, "waterNum", false, "WATER_NUM");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property WaterType = new Property(9, String.class, "waterType", false, "WATER_TYPE");
        public final static Property X = new Property(10, double.class, "X", false, "X");
        public final static Property Y = new Property(11, double.class, "Y", false, "Y");
        public final static Property DsType = new Property(12, String.class, "dsType", false, "DS_TYPE");
        public final static Property DsSize = new Property(13, double.class, "dsSize", false, "DS_SIZE");
        public final static Property Texture = new Property(14, String.class, "texture", false, "TEXTURE");
        public final static Property EndControl = new Property(15, String.class, "endControl", false, "END_CONTROL");
        public final static Property FlowType = new Property(16, String.class, "flowType", false, "FLOW_TYPE");
        public final static Property H = new Property(17, double.class, "h", false, "H");
        public final static Property WaterLevel = new Property(18, String.class, "waterLevel", false, "WATER_LEVEL");
        public final static Property DryDis = new Property(19, String.class, "dryDis", false, "DRY_DIS");
        public final static Property DryQuality = new Property(20, String.class, "dryQuality", false, "DRY_QUALITY");
        public final static Property RainyDis = new Property(21, String.class, "rainyDis", false, "RAINY_DIS");
        public final static Property RainyQuality = new Property(22, String.class, "rainyQuality", false, "RAINY_QUALITY");
        public final static Property PicName = new Property(23, String.class, "picName", false, "PIC_NAME");
        public final static Property Remark = new Property(24, String.class, "remark", false, "REMARK");
    }


    public DrainDataDao(DaoConfig config) {
        super(config);
    }
    
    public DrainDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRAIN_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WATER_NAME\" TEXT," + // 1: waterName
                "\"ROAD_NAME\" TEXT," + // 2: roadName
                "\"DATE\" TEXT," + // 3: date
                "\"WEATHER\" TEXT," + // 4: weather
                "\"UNIT\" TEXT," + // 5: unit
                "\"SURVER_MAN\" TEXT," + // 6: surverMan
                "\"WATER_NUM\" TEXT," + // 7: waterNum
                "\"TIME\" TEXT," + // 8: time
                "\"WATER_TYPE\" TEXT," + // 9: waterType
                "\"X\" REAL NOT NULL ," + // 10: X
                "\"Y\" REAL NOT NULL ," + // 11: Y
                "\"DS_TYPE\" TEXT," + // 12: dsType
                "\"DS_SIZE\" REAL NOT NULL ," + // 13: dsSize
                "\"TEXTURE\" TEXT," + // 14: texture
                "\"END_CONTROL\" TEXT," + // 15: endControl
                "\"FLOW_TYPE\" TEXT," + // 16: flowType
                "\"H\" REAL NOT NULL ," + // 17: h
                "\"WATER_LEVEL\" TEXT," + // 18: waterLevel
                "\"DRY_DIS\" TEXT," + // 19: dryDis
                "\"DRY_QUALITY\" TEXT," + // 20: dryQuality
                "\"RAINY_DIS\" TEXT," + // 21: rainyDis
                "\"RAINY_QUALITY\" TEXT," + // 22: rainyQuality
                "\"PIC_NAME\" TEXT," + // 23: picName
                "\"REMARK\" TEXT);"); // 24: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRAIN_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DrainData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String waterName = entity.getWaterName();
        if (waterName != null) {
            stmt.bindString(2, waterName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(3, roadName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String surverMan = entity.getSurverMan();
        if (surverMan != null) {
            stmt.bindString(7, surverMan);
        }
 
        String waterNum = entity.getWaterNum();
        if (waterNum != null) {
            stmt.bindString(8, waterNum);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String waterType = entity.getWaterType();
        if (waterType != null) {
            stmt.bindString(10, waterType);
        }
        stmt.bindDouble(11, entity.getX());
        stmt.bindDouble(12, entity.getY());
 
        String dsType = entity.getDsType();
        if (dsType != null) {
            stmt.bindString(13, dsType);
        }
        stmt.bindDouble(14, entity.getDsSize());
 
        String texture = entity.getTexture();
        if (texture != null) {
            stmt.bindString(15, texture);
        }
 
        String endControl = entity.getEndControl();
        if (endControl != null) {
            stmt.bindString(16, endControl);
        }
 
        String flowType = entity.getFlowType();
        if (flowType != null) {
            stmt.bindString(17, flowType);
        }
        stmt.bindDouble(18, entity.getH());
 
        String waterLevel = entity.getWaterLevel();
        if (waterLevel != null) {
            stmt.bindString(19, waterLevel);
        }
 
        String dryDis = entity.getDryDis();
        if (dryDis != null) {
            stmt.bindString(20, dryDis);
        }
 
        String dryQuality = entity.getDryQuality();
        if (dryQuality != null) {
            stmt.bindString(21, dryQuality);
        }
 
        String rainyDis = entity.getRainyDis();
        if (rainyDis != null) {
            stmt.bindString(22, rainyDis);
        }
 
        String rainyQuality = entity.getRainyQuality();
        if (rainyQuality != null) {
            stmt.bindString(23, rainyQuality);
        }
 
        String picName = entity.getPicName();
        if (picName != null) {
            stmt.bindString(24, picName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DrainData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String waterName = entity.getWaterName();
        if (waterName != null) {
            stmt.bindString(2, waterName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(3, roadName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String surverMan = entity.getSurverMan();
        if (surverMan != null) {
            stmt.bindString(7, surverMan);
        }
 
        String waterNum = entity.getWaterNum();
        if (waterNum != null) {
            stmt.bindString(8, waterNum);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String waterType = entity.getWaterType();
        if (waterType != null) {
            stmt.bindString(10, waterType);
        }
        stmt.bindDouble(11, entity.getX());
        stmt.bindDouble(12, entity.getY());
 
        String dsType = entity.getDsType();
        if (dsType != null) {
            stmt.bindString(13, dsType);
        }
        stmt.bindDouble(14, entity.getDsSize());
 
        String texture = entity.getTexture();
        if (texture != null) {
            stmt.bindString(15, texture);
        }
 
        String endControl = entity.getEndControl();
        if (endControl != null) {
            stmt.bindString(16, endControl);
        }
 
        String flowType = entity.getFlowType();
        if (flowType != null) {
            stmt.bindString(17, flowType);
        }
        stmt.bindDouble(18, entity.getH());
 
        String waterLevel = entity.getWaterLevel();
        if (waterLevel != null) {
            stmt.bindString(19, waterLevel);
        }
 
        String dryDis = entity.getDryDis();
        if (dryDis != null) {
            stmt.bindString(20, dryDis);
        }
 
        String dryQuality = entity.getDryQuality();
        if (dryQuality != null) {
            stmt.bindString(21, dryQuality);
        }
 
        String rainyDis = entity.getRainyDis();
        if (rainyDis != null) {
            stmt.bindString(22, rainyDis);
        }
 
        String rainyQuality = entity.getRainyQuality();
        if (rainyQuality != null) {
            stmt.bindString(23, rainyQuality);
        }
 
        String picName = entity.getPicName();
        if (picName != null) {
            stmt.bindString(24, picName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(25, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DrainData readEntity(Cursor cursor, int offset) {
        DrainData entity = new DrainData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // waterName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roadName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weather
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // surverMan
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // waterNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // waterType
            cursor.getDouble(offset + 10), // X
            cursor.getDouble(offset + 11), // Y
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dsType
            cursor.getDouble(offset + 13), // dsSize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // texture
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // endControl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // flowType
            cursor.getDouble(offset + 17), // h
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // waterLevel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dryDis
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dryQuality
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // rainyDis
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rainyQuality
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // picName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DrainData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWaterName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoadName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeather(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSurverMan(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWaterNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWaterType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setX(cursor.getDouble(offset + 10));
        entity.setY(cursor.getDouble(offset + 11));
        entity.setDsType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDsSize(cursor.getDouble(offset + 13));
        entity.setTexture(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEndControl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFlowType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setH(cursor.getDouble(offset + 17));
        entity.setWaterLevel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDryDis(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDryQuality(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRainyDis(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRainyQuality(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPicName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRemark(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DrainData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DrainData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DrainData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
